hcxdumptool, hcxpcapngtool



'use client'

import React, { useState, useEffect } from 'react';
import { 
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious
} from '@/components/ui/carousel';
import { useMediaQuery } from '@/hooks/use-media-query';


export default function AnimePage() {
  const movies = [
    {
      id: 1,
      title: "Fantastic Beasts: The Secrets of Dumbledore",
      description: "Professor Albus Dumbledore knows the powerful dark wizard Gellert Grindelwald is moving to seize control of the wizarding world.",
      image: "/4b87b51538547599d2d23071ef011c53.jpg",
      tag: "LIVE"
    },
    {
      id: 2,
      title: "The Batman",
      description: "When a sadistic serial killer begins murdering key political figures in Gotham, Batman is forced to investigate the city's hidden corruption.",
      image: "/Images/acc94741304eab75c76352042e6e5d8a.jpg",
      tag: "NEW"
    },
    {
      id: 3,
      title: "Doctor Strange in the Multiverse of Madness",
      description: "Dr. Stephen Strange casts a forbidden spell that opens the doorway to the multiverse and unleashes a threat too great to handle.",
      image: "/Images/7ac24f55b87f9606c6d936a07b0067b5.jpg",
      tag: "TRENDING"
    },
    {
      id: 4,
      title: "The Demon slayer",
      description: "When a sadistic serial killer begins murdering key political figures in Gotham, Batman is forced to investigate the city's hidden corruption.",
      image: "/Images/975364bd02272db5d2b3037132c62eb6.jpg",
      tag: "NEW"
    }
  ];

  const [currentSlide, setCurrentSlide] = useState(0);
  const [api, setApi] = useState();
  const [thumbnailApi, setThumbnailApi] = useState();
  const isMobile = useMediaQuery("(max-width: 800px)");

  const handleSlideChange = (index) => {
    setCurrentSlide(index);
    if (api) {
      api.scrollTo(index);
    }
    if (thumbnailApi) {
      thumbnailApi.scrollTo(index);
    }
  };

  useEffect(() => {
    const timer = setInterval(() => {
      if (api) {
        const nextSlide = (currentSlide + 1) % movies.length;
        api.scrollTo(nextSlide);
        setCurrentSlide(nextSlide);
        if (thumbnailApi) {
          thumbnailApi.scrollTo(nextSlide);
        }
      }
    }, 5000); 

    return () => clearInterval(timer);
  }, [api, thumbnailApi, currentSlide, movies.length]);

  const handleApiChange = (newApi) => {
    setApi(newApi);
  };

  const handleThumbnailApiChange = (newApi) => {
    setThumbnailApi(newApi);
    if (newApi && currentSlide !== undefined) {
      setTimeout(() => {
        newApi.scrollTo(currentSlide);
      }, 100);
    }
  };

  useEffect(() => {
    if (api) {
      const handleSelect = () => {
        const selectedIndex = api.selectedScrollSnap();
        setCurrentSlide(selectedIndex);
        if (thumbnailApi) {
          thumbnailApi.scrollTo(selectedIndex);
        }
      };
      
      api.on('select', handleSelect);
      return () => {
        api.off('select', handleSelect);
      };
    }
  }, [api, thumbnailApi]);
  
  useEffect(() => {
    if (thumbnailApi && currentSlide !== undefined) {
      thumbnailApi.scrollTo(currentSlide);
    }
  }, [currentSlide, thumbnailApi]);

  return (
    <div>
      <div className="bg-black text-white w-full relative min-h-screen">
        {/* Carousel container */}
        <div className="absolute inset-0 w-full h-screen">
          <Carousel 
            className="w-full h-full" 
            onValueChange={(value) => setCurrentSlide(parseInt(value))}
            setApi={handleApiChange}
            opts={{
              align: "start",
              loop: true,
            }}
          >
            <CarouselContent>
              {movies.map((movie, index) => (
                <CarouselItem key={movie.id} value={index.toString()}>
                  <div className="relative w-full h-screen">
                    {/* Movie background image */}
                    <div className="absolute inset-0 w-full h-full">
                      <img 
                        src={movie.image} 
                        alt={movie.title}
                        className="w-full h-full object-cover"
                      />
                      {/* gradient overlay for dramatic effect */}
                      <div className="absolute inset-0 bg-gradient-to-t from-black via-black/50 to-transparent"></div>
                      <div className="absolute inset-0 bg-gradient-to-r from-black/80 via-transparent to-black/80"></div>
                      
                      {/* Violet accents/glow */}
                      <div className="absolute inset-0 bg-violet-900/20 mix-blend-overlay"></div>
                    </div>
                  </div>
                </CarouselItem>
              ))}
            </CarouselContent>
            
            {/* navigation buttons */}
            <div className="absolute bottom-12 left-1/2 -translate-x-1/2 z-40">
              <div className="ml-2">
                <CarouselPrevious 
                  className="h-12 w-12 rounded-full bg-black/60 hover:bg-violet-900/70 border-2 border-violet-800/70
                   text-white mr-4 focus:outline-none" 
                  onClick={() => {
                    const prevSlide = (currentSlide - 1 + movies.length) % movies.length;
                    handleSlideChange(prevSlide);
                  }}
                />
              </div>
              <CarouselNext 
                className="h-12 w-12 rounded-full bg-black/60 hover:bg-violet-900/70 border-2 border-violet-800/70
                 text-white ml-4 focus:outline-none" 
                onClick={() => {
                  const nextSlide = (currentSlide + 1) % movies.length;
                  handleSlideChange(nextSlide);
                }}
              />
            </div>
            
            {/* indicator dots */}
            <div className="absolute bottom-16 left-20 md:left-12 flex items-center space-x-2 z-20">
              {movies.map((_, index) => (
                <button
                  key={index}
                  className={`h-1 transition-all duration-300 rounded-lg ${
                    currentSlide === index 
                      ? "bg-violet-600 w-6" 
                      : "bg-gray-600 w-3 hover:bg-violet-600/80"
                  }`}
                  onClick={() => handleSlideChange(index)}
                  aria-label={`Go to slide ${index + 1}`}
                />
              ))}
            </div>
          </Carousel>
        </div>
        
        {/* Main content container */}
        <div className="relative z-30 flex flex-col justify-center h-screen">
          <div className="px-4 md:px-12 max-w-lg h-screen flex flex-col justify-center pt-20 md:pt-0">
            <div className="mb-4 md:mb-6">
              <span className="bg-violet-900 text-white text-xs px-4 py-1 rounded-sm border-l-2 border-violet-600 uppercase tracking-wider font-medium">
                {movies[currentSlide].tag}
              </span>
            </div>
            
            <h2 className="text-2xl md:text-4xl font-bold mb-4 md:mb-6 tracking-tight text-gray-100 uppercase">
              {movies[currentSlide].title}
            </h2>
            
            <p className="text-gray-300 mb-6 md:mb-8 text-sm leading-relaxed border-l border-violet-800 pl-4">
              {movies[currentSlide].description}
            </p>
            
            <div className="flex space-x-4 mb-8">
              <button className="bg-violet-800 hover:bg-violet-700 text-white font-medium px-6 md:px-8 py-2 md:py-3 rounded-sm uppercase tracking-wider text-sm border-b-2 border-violet-950 transition-all">
                Watch Now
              </button>
              <button className="border border-gray-700 hover:border-violet-700 hover:bg-violet-900/20 rounded-sm p-2 md:p-3 transition-all">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400 hover:text-violet-400">
                  <path d="M5 12h14" />
                  <path d="M12 5v14" />
                </svg>
              </button>
            </div>
          </div>
        </div>

        {/* Desktop thumbnails carousel */}
        {!isMobile && (
          <div className="absolute bottom-24 right-12 z-40 w-96">
            <Carousel
              className="w-full p-2 border border-amber-300"
              setApi={handleThumbnailApiChange}
              opts={{
                align: "center", 
                loop: true,
                slidesToScroll: 1,
              }}
              value={currentSlide.toString()}
            >
              <CarouselContent className="gap-4">
                {movies.map((movie, index) => (
                  <CarouselItem
                    key={movie.id}
                    value={index.toString()}
                    className={`basis-1/3 transition-all duration-300 px-1 my-auto ${
                      currentSlide === index ? 'z-10' : ''
                    }`}
                  >
                    <button 
                      onClick={() => handleSlideChange(index)}
                      className="relative w-full"
                    >
                      <div className={`relative ${
                        currentSlide === index ? 'h-44' : 'h-42'
                      } transition-all duration-300`}>
                        {currentSlide === index && (
                          <div className="absolute -inset-1 bg-violet-600/30 blur-md animate-pulse rounded-md"></div>
                        )}
                        
                        <div className={`absolute inset-0 shadow-lg transition-all ${
                          currentSlide === index 
                            ? 'border-2 border-violet-500 shadow-violet-600/50 scale-110' 
                            : 'border border-violet-900/30 opacity-70'
                        }`}>
                          <img 
                            src={movie.image} 
                            alt={movie.title}
                            className="w-full h-full object-cover"
                          />
                          
                          <div className="absolute inset-0 bg-gradient-to-t from-black via-black/60 to-black/20"></div>
                          
                          <div className="absolute top-2 right-2 text-xs text-violet-500 font-bold">
                            {index === 0 ? 'I' : index === 1 ? 'II' : index === 2 ? 'III' : 'IV'}
                          </div>
                          
                          <div className="absolute bottom-0 left-0 right-0">
                            <div className={`h-0.5 w-full ${
                              currentSlide === index ? 'bg-violet-500' : 'bg-violet-900/50'
                            }`}></div>
                            
                            <div className="bg-black/90 p-2">
                              <h5 className="text-xs text-white font-medium line-clamp-1">{movie.title}</h5>
                            </div>
                          </div>
                        </div>
                      </div>
                    </button>
                  </CarouselItem>
                ))}
              </CarouselContent>
            </Carousel>
          </div>
        )}

        {/* Footer area */}
        <div className="absolute bottom-0 left-0 right-0 z-30 flex flex-col md:flex-row justify-between items-center 
        px-4 md:px-12 py-4 bg-gradient-to-t from-black to-transparent">
          <div className="flex items-center space-x-6 mb-2 md:mb-0">
            <div className="flex items-center space-x-2">
              <span className="text-gray-500 text-xs">Rating:</span>
              <div className="flex">
                {[1, 2, 3, 4, 5].map((star) => (
                  <svg key={star} xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="currentColor" className="text-violet-600">
                    <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
                  </svg>
                ))}
              </div>
            </div>
            <div>
              <span className="text-gray-500 text-xs">Release: 2022</span>
            </div>
          </div>
          <div className="flex space-x-2">
            <button className="w-8 h-8 rounded-full flex items-center justify-center border border-gray-800 hover:border-violet-800 transition-all">
              <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400">
                <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z" />
              </svg>
            </button>
            <button className="w-8 h-8 rounded-full flex items-center justify-center border border-gray-800 hover:border-violet-800 transition-all">
              <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400">
                <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}







           
{/* Desktop thumbnails carousel functions the way i want but does not have the styles i require */}
{!isMobile && (
  <div className="absolute bottom-24 right-12 z-40 w-96">
    <Carousel
      className="w-full p-2 border border-amber-300"
      setApi={handleThumbnailApiChange}
      opts={{
        align: "center", 
        loop: true,
        slidesToScroll: 1,
      }}
      value={currentSlide.toString()}
    >
      <CarouselContent className="gap-4">
        {movies.map((movie, index) => (
          <CarouselItem
            key={movie.id}
            value={index.toString()}
            className={`basis-1/3 transition-all duration-300 px-1 my-auto ${
              currentSlide === index ? 'z-10' : ''
            }`}
          >
            <button 
              onClick={() => handleSlideChange(index)}
              className="relative w-full"
            >
              <div className={`relative ${
                currentSlide === index ? 'h-44' : 'h-42'
              } transition-all duration-300`}>
                {currentSlide === index && (
                  <div className="absolute -inset-1 bg-violet-600/30 blur-md animate-pulse rounded-md"></div>
                )}
                
                <div className={`absolute inset-0 shadow-lg transition-all ${
                  currentSlide === index 
                    ? 'border-2 border-violet-500 shadow-violet-600/50 scale-110' 
                    : 'border border-violet-900/30 opacity-70'
                }`}>
                  <img 
                    src={movie.image} 
                    alt={movie.title}
                    className="w-full h-full object-cover"
                  />
                  
                  <div className="absolute inset-0 bg-gradient-to-t from-black via-black/60 to-black/20"></div>
                  
                  <div className="absolute top-2 right-2 text-xs text-violet-500 font-bold">
                    {index === 0 ? 'I' : index === 1 ? 'II' : index === 2 ? 'III' : 'IV'}
                  </div>
                  
                  <div className="absolute bottom-0 left-0 right-0">
                    <div className={`h-0.5 w-full ${
                      currentSlide === index ? 'bg-violet-500' : 'bg-violet-900/50'
                    }`}></div>
                    
                    <div className="bg-black/90 p-2">
                      <h5 className="text-xs text-white font-medium line-clamp-1">{movie.title}</h5>
                    </div>
                  </div>
                </div>
              </div>
            </button>
          </CarouselItem>
        ))}
      </CarouselContent>
    </Carousel>
  </div>
)}

{/* thumbnail navigation - contains the design i want but lucks the functionality i want */}
{!isMobile && (
  <div className="absolute bottom-12 right-8 z-40 flex justify-end items-end space-x-6 px-0">
    {movies.map((movie, index) => (
      <button 
        key={movie.id}
        onClick={() => handleSlideChange(index)}
        className={`group relative flex-shrink-0 transition-all duration-300 ${
          currentSlide === index 
            ? 'w-36 h-52 z-10' 
            : 'w-28 h-40 opacity-80 hover:opacity-100 grayscale-[30%] hover:grayscale-0'
        }`}
      >
        {/* Glow effect for active thumbnail */}
        {currentSlide === index && (
          <div className="absolute -inset-1 bg-violet-600/30 blur-md animate-pulse"></div>
        )}
        
        {/* Cover with Diablo-style frame */}
        <div className={`absolute inset-0 shadow-lg ${
          currentSlide === index 
            ? 'border-2 border-violet-500 shadow-violet-600/50' 
            : 'border border-violet-900/30'
        }`}>
          {/* Cover image */}
          <img 
            src={movie.image} 
            alt={movie.title}
            className="w-full h-full object-cover"
          />
          
          {/* Dark gradient overlay */}
          <div className="absolute inset-0 bg-gradient-to-t from-black via-black/60 to-black/20"></div>
          
          {/* Roman numeral for Diablo style */}
          <div className="absolute top-2 right-2 text-xs text-violet-500 font-bold">
            {index === 0 ? 'I' : index === 1 ? 'II' : 'III'}
          </div>
          
          {/* Bottom info bar */}
          <div className="absolute bottom-0 left-0 right-0">
            {/* Glowing line */}
            <div className={`h-0.5 w-full ${
              currentSlide === index ? 'bg-violet-500' : 'bg-violet-900/50'
            }`}></div>
            
            {/* Title with dark background */}
            <div className="bg-black/90 p-2">
              <h5 className="text-xs text-white font-medium line-clamp-1">{movie.title}</h5>
            </div>
          </div>
        </div>
      </button>
    ))}
  </div>
)}












// import { 
//   TrendingUp, 
//   Zap, 
//   Heart, 
//   Sparkles, 
//   Clock, 
//   Star,
//   Palette
// } from 'lucide-react'

// const navigationItems = [
//   { id: 'trending', label: 'Trending', icon: TrendingUp },
//   { id: 'action', label: 'Action', icon: Zap },
//   { id: 'romance', label: 'Romance', icon: Heart },
//   { id: 'animation', label: 'Animation', icon: Sparkles },
//   { id: 'horror', label: 'Horror', icon: Clock },
//   { id: 'special', label: 'Special', icon: Star },
//   { id: 'drama', label: 'Drama', icon: Palette },
// ]

 {/* <nav 
        className="sticky top-[64px] z-40 bg-white"
      >
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex items-center justify-center space-x-1 py-3">
            {navigationItems.map((item) => {
              const IconComponent = item.icon
              const isActive = activeItem === item.id
              
              return (
                <button
                  key={item.id}
                  onClick={() => setActiveItem(item.id)}
                  className={`
                    flex items-center space-x-2 px-4 py-2.5 rounded-full
                    transition-all duration-200 ease-in-out
                    hover:bg-gray-100/80 hover:scale-105
                    ${isActive 
                      ? 'bg-gray-900 text-white shadow-md' 
                      : 'text-gray-600 hover:text-gray-900'
                    }
                  `}
                >
                  <IconComponent 
                    size={18} 
                    className={`
                      transition-transform duration-200
                      ${isActive ? 'scale-110' : ''}
                    `}
                  />
                  <span className="text-sm font-medium whitespace-nowrap">
                    {item.label}
                  </span>
                </button>
              )
            })}
          </div>
        </div>
      </nav> */}




















'use client'

import React, { useState } from 'react';
import { ChevronRight, Download, Map, RefreshCw, Eye, CheckCircle, Sun, Moon, Monitor } from 'lucide-react';

export default function SettingsPage() {
  const [activeTab, setActiveTab] = useState('Workspace');
  const [syncWithSystem, setSyncWithSystem] = useState(true);
  const [selectedTheme, setSelectedTheme] = useState('system');

  const tabs = ['Account', 'Preferences', 'Workspace', 'Notifications', 'Application', 'API'];

  const FeatureCard = ({ icon: Icon, title, description, buttonText, buttonAction, activated = false, learnMoreAction }) => (
    <div className="bg-white border border-gray-200 rounded-lg p-6 hover:shadow-sm transition-shadow">
      <div className="flex items-start gap-4">
        <div className="flex-shrink-0">
          <Icon className="w-5 h-5 text-gray-600 mt-1" />
        </div>
        <div className="flex-1">
          <h3 className="font-medium text-gray-900 mb-2">{title}</h3>
          <p className="text-sm text-gray-600 mb-4 leading-relaxed">{description}</p>
          <div className="flex items-center gap-4">
            {activated ? (
              <div className="flex items-center gap-2 text-green-600">
                <CheckCircle className="w-4 h-4" />
                <span className="text-sm font-medium">Activated</span>
              </div>
            ) : (
              <button
                onClick={buttonAction}
                className="text-sm text-gray-700 hover:text-gray-900 font-medium"
              >
                {buttonText}
              </button>
            )}
            <button
              onClick={learnMoreAction}
              className="flex items-center gap-1 text-sm text-gray-500 hover:text-gray-700"
            >
              Learn more
              <ChevronRight className="w-3 h-3" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const IntegrationCard = ({ name, description, icon, color }) => (
    <div className="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow">
      <div className="flex items-center gap-3">
        <div className={`w-8 h-8 rounded ${color} flex items-center justify-center text-white text-sm font-medium`}>
          {icon}
        </div>
        <div className="flex-1">
          <h4 className="font-medium text-gray-900 text-sm">{name}</h4>
          <p className="text-xs text-gray-500 mt-1">{description}</p>
        </div>
      </div>
    </div>
  );

  const ThemeCard = ({ theme, title, description, icon: Icon, isSelected, mockupBg, mockupElements }) => (
    <div 
      className={`border-2 rounded-lg p-4 cursor-pointer hover:shadow-sm transition-all ${
        isSelected ? 'border-blue-500 bg-blue-50' : 'border-gray-200 bg-white hover:border-gray-300'
      }`}
      onClick={() => setSelectedTheme(theme)}
    >
      <div className="flex items-center gap-2 mb-3">
        <Icon className="w-4 h-4 text-gray-600" />
        <span className="font-medium text-gray-900 text-sm">{title}</span>
        {theme === 'system' && (
          <span className="bg-blue-100 text-blue-700 text-xs px-2 py-1 rounded-full font-medium">
            Active
          </span>
        )}
      </div>
      
      <p className="text-xs text-gray-600 mb-4">{description}</p>
      
      {/* Theme Preview Mockup */}
      <div className={`w-full h-24 rounded border ${mockupBg} relative overflow-hidden`}>
        {mockupElements}
      </div>
      
      <div className="mt-3 text-xs text-gray-500">
        Default {theme === 'system' ? 'system' : theme}
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto py-8 px-4">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-2xl font-semibold text-gray-900 mb-6">Settings</h1>
          
          {/* Navigation Tabs */}
          <div className="border-b border-gray-200">
            <nav className="flex space-x-8">
              {tabs.map((tab) => (
                <button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                    activeTab === tab
                      ? 'border-violet-500 text-violet-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  {tab}
                </button>
              ))}
            </nav>
          </div>
        </div>

        {/* Content based on active tab */}
        <div className="space-y-8">
          {activeTab === 'Preferences' && (
            <>
              {/* Preferences Section */}
              <div>
                <h2 className="text-lg font-medium text-gray-900 mb-2">Preferences</h2>
                <p className="text-sm text-gray-600 mb-6">
                  Select how you would like your interface to look. Select a theme or sync with your system and have automatic theme switching.
                </p>
              </div>

              {/* Sync with system toggle */}
              <div className="flex items-center justify-between py-4">
                <span className="text-sm font-medium text-gray-900">Sync with system</span>
                <button
                  onClick={() => setSyncWithSystem(!syncWithSystem)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                    syncWithSystem ? 'bg-blue-600' : 'bg-gray-200'
                  }`}
                >
                  <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      syncWithSystem ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>

              {/* Theme Selection */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <ThemeCard
                  theme="light"
                  title="Light theme"
                  description="This theme will activate when your system is set to light mode"
                  icon={Sun}
                  isSelected={selectedTheme === 'light'}
                  mockupBg="bg-gray-50"
                  mockupElements={
                    <div className="p-2">
                      <div className="flex items-center gap-2 mb-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <div className="w-12 h-1 bg-gray-300 rounded"></div>
                      </div>
                      <div className="space-y-1">
                        <div className="w-full h-2 bg-white rounded border"></div>
                        <div className="w-3/4 h-2 bg-white rounded border"></div>
                        <div className="w-1/2 h-2 bg-white rounded border"></div>
                      </div>
                    </div>
                  }
                />
                
                <ThemeCard
                  theme="dark"
                  title="Dark theme"
                  description="This theme will activate when your system is set to dark mode"
                  icon={Moon}
                  isSelected={selectedTheme === 'dark'}
                  mockupBg="bg-gray-800"
                  mockupElements={
                    <div className="p-2">
                      <div className="flex items-center gap-2 mb-2">
                        <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                        <div className="w-12 h-1 bg-gray-600 rounded"></div>
                      </div>
                      <div className="space-y-1">
                        <div className="w-full h-2 bg-gray-700 rounded"></div>
                        <div className="w-3/4 h-2 bg-gray-700 rounded"></div>
                        <div className="w-1/2 h-2 bg-gray-700 rounded"></div>
                      </div>
                    </div>
                  }
                />
                
                <ThemeCard
                  theme="system"
                  title="System"
                  description="This is the theme that will take it your system is using"
                  icon={Monitor}
                  isSelected={selectedTheme === 'system'}
                  mockupBg="bg-gradient-to-r from-gray-50 to-gray-800"
                  mockupElements={
                    <div className="p-2 flex">
                      <div className="w-1/2 pr-1">
                        <div className="flex items-center gap-1 mb-1">
                          <div className="w-1 h-1 bg-blue-500 rounded-full"></div>
                          <div className="w-6 h-0.5 bg-gray-300 rounded"></div>
                        </div>
                        <div className="space-y-0.5">
                          <div className="w-full h-1 bg-white rounded border"></div>
                          <div className="w-3/4 h-1 bg-white rounded border"></div>
                        </div>
                      </div>
                      <div className="w-1/2 pl-1">
                        <div className="flex items-center gap-1 mb-1">
                          <div className="w-1 h-1 bg-blue-400 rounded-full"></div>
                          <div className="w-6 h-0.5 bg-gray-600 rounded"></div>
                        </div>
                        <div className="space-y-0.5">
                          <div className="w-full h-1 bg-gray-700 rounded"></div>
                          <div className="w-3/4 h-1 bg-gray-700 rounded"></div>
                        </div>
                      </div>
                    </div>
                  }
                />
              </div>

              {/* Action buttons */}
              <div className="flex justify-end gap-3 pt-6">
                <button className="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 transition-colors">
                  Cancel
                </button>
                <button className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 transition-colors">
                  Save changes
                </button>
              </div>
            </>
          )}

          {activeTab === 'Workspace' && (
            <>
              {/* Workspace Section */}
              <div>
                <h2 className="text-lg font-medium text-gray-900 mb-2">Workspace</h2>
                <p className="text-sm text-gray-600 mb-6">Manage your workspace settings</p>
              </div>

              {/* Explore Features */}
              <div>
                <h3 className="text-base font-medium text-gray-900 mb-6">Explore features</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <FeatureCard
                    icon={Download}
                    title="Issue Migration Assistant"
                    description="Copy over existing issues from Jira, Shortcut, Asana or GitHub"
                    buttonText="Migrate issues"
                    buttonAction={() => console.log('Migrate issues clicked')}
                    learnMoreAction={() => console.log('Learn more about migration')}
                  />
                  
                  <FeatureCard
                    icon={Map}
                    title="Roadmaps"
                    description="Roadmaps allow you to group and organize projects in your workspace"
                    buttonText="Learn more"
                    buttonAction={() => console.log('Roadmaps clicked')}
                    learnMoreAction={() => console.log('Learn more about roadmaps')}
                    activated={true}
                  />
                  
                  <FeatureCard
                    icon={RefreshCw}
                    title="Cycles"
                    description="Track your team's workload and velocity with Cycles"
                    buttonText="Try Cycles"
                    buttonAction={() => console.log('Try Cycles clicked')}
                    learnMoreAction={() => console.log('Learn more about cycles')}
                  />
                  
                  <FeatureCard
                    icon={Eye}
                    title="Views"
                    description="Create filtered views that you can save and share with others"
                    buttonText="Open views"
                    buttonAction={() => console.log('Open views clicked')}
                    learnMoreAction={() => console.log('Learn more about views')}
                  />
                </div>
              </div>

              {/* Integrations */}
              <div>
                <h3 className="text-base font-medium text-gray-900 mb-6">Integrations</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <IntegrationCard
                    name="Figma"
                    description="Collaborate when designing, built for teams like yours"
                    icon="F"
                    color="bg-purple-500"
                  />
                  
                  <IntegrationCard
                    name="Discord"
                    description="Free voice, video and text chat app designed for communities and friends"
                    icon="D"
                    color="bg-indigo-500"
                  />
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
};






































